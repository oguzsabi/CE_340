#!/usr/bin/env python
# import inquirer
import optparse
import argparse
import ipaddress
import subprocess
import sys
from datetime import datetime
import multiprocessing
import logging
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)
from scapy.all import *


def user_guide():
    user_guide_text = open("user_guide.txt", "r+")
    lines = user_guide_text.readlines()
    return lines


def ping_scan(ips, alives):
    dev_null = open(os.devnull, 'w')
    while True:
        ip = ips.get()
        if ip is None:
            break

        try:
            subprocess.check_call(['ping', '-c1', ip], stdout=dev_null)
            alives.put(ip)
        except:
            pass


def multiprocess_ping_scan(base_of_ip, check):
    ip_address = multiprocessing.Queue()
    live_hosts = multiprocessing.Queue()
    processes = []

    if check:
        icmp_dat = open("icmp.dat", "w+")
        icmp_dat.close()
        icmp_dat = open("icmp.dat", "a+")

        for i in range(256):
            processes.append(multiprocessing.Process(target=ping_scan, args=(ip_address, live_hosts)))

        for i in processes:
            i.start()

        for i in range(1, 256):
            ip_address.put(base_of_ip + '{0}'.format(i))

        for i in processes:
            ip_address.put(None)

        for i in processes:
            i.join()

        print("Live Hosts Are: ")
        while not live_hosts.empty():
            host = live_hosts.get()
            icmp_dat.write(host + "\n")
            print(host)
    else:
        icmp_dat = open("icmp.dat", "r")
        total_lines = len(icmp_dat.readlines())
        icmp_dat.seek(0, 0)
        ip_adds = []
        for i in range(total_lines):
            ip_adds.append(icmp_dat.readline().split())

        for i in range(total_lines):
            processes.append(multiprocessing.Process(target=ping_scan, args=(ip_address, live_hosts)))

        for i in processes:
            i.start()

        for i in ip_adds:
            ip_address.put(i[0])

        for i in processes:
            ip_address.put(None)

        for i in processes:
            i.join()

        icmp_dat.close()
        icmp_dat = open("icmp.dat", "w")
        icmp_dat.close()
        icmp_dat = open("icmp.dat", "a")
        print("Live Hosts Are (Still): ")
        while not live_hosts.empty():
            host = live_hosts.get()
            icmp_dat.write(host + "\n")
            print(host)


parser = optparse.OptionParser()
parser.add_option("-s", "--support", default=True, action="store_true", dest="help", help="Write -h or --help to see your options")
parser.add_option("-p", "--ping-scan", dest="ping", help="Write -h or --help to see your options")
parser.add_option("-g", "--garkt", dest="garkt", action="store_true", help="Write -h or --help to see your options")
# parser.add_option("-w", "--w", dest="write", help="Write -h or --help to see your options")
options = parser.parse_args()[0]

t1 = datetime.now()
if options.ping:
    counter = 0
    ip_base = ""

    for i in options.ping:
        if counter == 3:
            break
        if i == '.':
            counter += 1
        ip_base += i

    multiprocess_ping_scan(ip_base, True)
    t2 = datetime.now()
    print("Ping scan took " + str(t2-t1))

if options.garkt:
    multiprocess_ping_scan('12312312', False)

# for i in range(0, 256):
#     subprocess.call("sudo nmap -oN icmp.dat -v0 -sn 192.168.1." + str(i), shell=True)

# if options.ping:
#     if options.write:
#         icmp_dat = open("icmp.dat", "w+")
#     else:
#         alive = subprocess.call("sudo nmap -oN icmp.dat -v0 -sn " + options.ping, shell=True)
# elif options.help:
#     for i in user_guide():
#         sys.stdout.write(i)
#     print("", end="\n")
