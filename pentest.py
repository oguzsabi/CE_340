#!/usr/bin/env python
# import inquirer
import optparse
import argparse
import subprocess
import sys
from datetime import datetime
import multiprocessing
import os
import socket
from math import ceil, floor
# import logging
# logging.getLogger("scapy.runtime").setLevel(logging.ERROR)
# from scapy.all import *

lock = multiprocessing.Lock()


def user_guide():
    user_guide_text = open("user_guide.txt", "r+")
    lines = user_guide_text.readlines()
    return lines


def ping_scan(ips, alives):
    dev_null = open(os.devnull, 'w')
    while True:
        ip = ips.get()
        if ip is None:
            break

        try:
            subprocess.check_call(['ping', '-q', '-c1', ip], stdout=dev_null)
            alives.put(ip)
        except:
            pass


def port_identification(port):
    temp_port = port.get()
    my_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    my_socket.settimeout(10)
    result = my_socket.connect_ex((ip, temp_port))
    # print(only_open_ports)
    if not only_open_ports:
        if result == 0:
            with lock:
                ports_dat = open("ports.dat", "a")
                try:
                    name = socket.getservbyport(temp_port)
                except OSError:
                    name = "unknown"
                except KeyboardInterrupt:
                    sys.exit("You pressed Ctrl + C")
                ports_dat.write("Port: " + str(temp_port) + "(" + str(name) + ")" + " OPEN\n")
                ports_dat.close()
            my_socket.close()

        else:
            with lock:
                ports_dat = open("ports.dat", "a")
                try:
                    name = socket.getservbyport(temp_port)
                except OSError:
                    name = "unknown"
                except KeyboardInterrupt:
                    sys.exit("You pressed Ctrl + C")
                ports_dat.write("Port: " + str(temp_port) + "(" + str(name) + ")" + " closed\n")
                ports_dat.close()
            my_socket.close()
    else:
        if result == 0:
            with lock:
                open_ports_dat = open("open_ports.dat", "a")
                try:
                    name = socket.getservbyport(temp_port)
                except OSError:
                    name = "unknown"
                except KeyboardInterrupt:
                    sys.exit("You pressed Ctrl + C")
                open_ports_dat.write("Port: " + str(temp_port) + "(" + str(name) + ")" + " OPEN\n")
                open_ports_dat.close()
            my_socket.close()


def multiprocess_ping_scan(base_of_ip, check=True):
    ip_address = multiprocessing.Queue()
    live_hosts = multiprocessing.Queue()
    processes = []

    if check:
        icmp_dat = open("icmp.dat", "w+")
        icmp_dat.close()
        icmp_dat = open("icmp.dat", "a+")

        for i in range(256):
            processes.append(multiprocessing.Process(target=ping_scan, args=(ip_address, live_hosts)))

        for i in processes:
            i.start()

        for i in range(1, 256):
            ip_address.put(base_of_ip + '{0}'.format(i))

        for i in processes:
            ip_address.put(None)

        print("Scanning online hosts...")

        for i in processes:
            i.join()

        print("\n\n---------- LIVE HOSTS ----------")
        while not live_hosts.empty():
            host = live_hosts.get()
            icmp_dat.write(host + "\n")
            print("         " + host)
        print("--------------------------------\n\n")
    else:
        icmp_dat = open("icmp.dat", "r")
        total_lines = len(icmp_dat.readlines())
        icmp_dat.seek(0, 0)
        ip_adds = []
        for i in range(total_lines):
            ip_adds.append(icmp_dat.readline().split())

        for i in range(total_lines):
            processes.append(multiprocessing.Process(target=ping_scan, args=(ip_address, live_hosts)))

        for i in processes:
            i.start()

        for i in ip_adds:
            ip_address.put(i[0])

        for i in processes:
            ip_address.put(None)

        for i in processes:
            i.join()

        icmp_dat.close()
        icmp_dat = open("icmp.dat", "w")
        icmp_dat.close()
        icmp_dat = open("icmp.dat", "a")
        while not live_hosts.empty():
            host = live_hosts.get()
            icmp_dat.write(host + "\n")


def multiprocess_port_scan():
    if not only_open_ports:
        ports_dat = open("ports.dat", "a")
        ports_dat.write(ip + "\n")
        ports_dat.close()
    else:
        ports_dat = open("open_ports.dat", "a")
        ports_dat.write(ip + "\n")
        ports_dat.close()

    ports = multiprocessing.Queue()
    port_diff = int(end_port) - int(start_port)

    if port_diff > 1000:
        port_diff_pieces = port_diff / 1000
        port_diff_pieces = ceil(port_diff_pieces)
        first_number = floor(int(start_port) / 1000)

        for t in range(first_number, first_number + port_diff_pieces):
            for i in range(t * 1000, t * 1000 + 1001):
                ports.put(i)

            start_time = datetime.now()
            processes = [multiprocessing.Process(target=port_identification, args=(ports,)) for j in
                         range(1000)]

            for i in processes:
                i.start()

            for i in processes:
                i.join(10)

    else:
        for i in range(int(start_port), int(end_port) + 1):
            ports.put(i)

        start_time = datetime.now()
        processes = [multiprocessing.Process(target=port_identification, args=(ports,)) for j in
                     range(abs(int(end_port) + 1 - int(start_port)))]

        for i in processes:
            i.start()

        for i in processes:
            i.join(10)


    end_time = datetime.now()
    total_time = end_time - start_time
    print("Port scan for " + ip + " took " + str(total_time))


while True:
    print("Welcome to PenTest 2000 (v0.1)")
    print("-1) Exit")
    print("0) Open user guide ( alternatively type 'pentest.py -h' )")
    print("1) Ping scan your local network")
    print("2) Port scan for all the ports of the online hosts")
    print("3) Port scan for all the open ports of the online hosts")

    choice = input("\nYour choice: \n")

    if choice == '-1' or choice.lower() == 'exit':
        sys.exit("Exiting PenTest 2000...")

    if choice == '0':
        for i in user_guide():
            sys.stdout.write(i)
        print("\n")

    if choice == '1':
        ip_address = input("\nPlease enter an ip (Ex: 192.168.1.40): ")

        counter = 0
        ip_base = ""

        for i in ip_address:
            if counter == 3:
                break
            if i == '.':
                counter += 1
            ip_base += i

        if counter != 3:
            print("\n")
            continue

        if len(ip_base) < 6:
            print("\n")
            continue

        multiprocess_ping_scan(ip_base)

    if choice == '2':
        only_open_ports = False
        open("ports.dat", "w+").close()

        port_range = input("\nPlease enter a port (Ex: 80) or a port range (Ex: 20-80):\n")
        start_port = ''
        end_port = ''
        minus_check = False

        if len(port_range) > 0:
            for i in port_range:
                if i == "-":
                    minus_check = True
                    continue
                if not minus_check:
                    start_port += i
                if minus_check:
                    end_port += i

            if len(end_port) < 1:
                end_port = start_port

            try:
                if int(end_port) < int(start_port):
                    temp = start_port
                    start_port = end_port
                    end_port = temp
            except ValueError:
                print("\n\nPlease Try Again With Correct Values\n\n")
                continue
        else:
            print("\n\nPlease Try Again With Correct Values\n\n")
            continue

        print("START PORT " + start_port)
        print("END PORT " + end_port)

        print("\nChecking hosts...")
        multiprocess_ping_scan('place_holder', False)

        icmp_dat = open("icmp.dat", "r")
        total_lines = len(icmp_dat.readlines())
        icmp_dat.seek(0, 0)

        ip_adds = []
        for i in range(total_lines):
            ip_adds.append(icmp_dat.readline().split())

        start_time = datetime.now()
        print("\nPort scan has started...")

        for j in range(len(ip_adds)):
            for k in range(1):
                ip = ip_adds[j][k]
                multiprocess_port_scan()

        end_time = datetime.now()
        print("\nAll done in " + str(end_time - start_time) + "\n\n")

    if choice == '3':
        only_open_ports = True
        open("open_ports.dat", "w+").close()

        port_range = input("\nPlease enter a port (Ex: 80) or a port range (Ex: 20-80):\n")
        start_port = ''
        end_port = ''
        minus_check = False

        if len(port_range) > 0:
            for i in port_range:
                if i == "-":
                    minus_check = True
                    continue
                if not minus_check:
                    start_port += i
                if minus_check:
                    end_port += i

            if len(end_port) < 1:
                end_port = start_port

            try:
                if int(end_port) < int(start_port):
                    temp = start_port
                    start_port = end_port
                    end_port = temp
            except ValueError:
                print("\n\nPlease Try Again With Correct Values\n\n")
                continue
        else:
            print("\n\nPlease Try Again With Correct Values\n\n")
            continue

        print("START PORT " + start_port)
        print("END PORT " + end_port)

        print("\nChecking hosts...")
        multiprocess_ping_scan('place_holder', False)

        icmp_dat = open("icmp.dat", "r")
        total_lines = len(icmp_dat.readlines())
        icmp_dat.seek(0, 0)

        ip_adds = []
        for i in range(total_lines):
            ip_adds.append(icmp_dat.readline().split())

        start_time = datetime.now()
        print("\nPort scan has started...")

        for j in range(len(ip_adds)):
            for k in range(1):
                ip = ip_adds[j][k]
                multiprocess_port_scan()

        end_time = datetime.now()
        print("\nAll done in " + str(end_time - start_time) + "\n\n")


# parser = optparse.OptionParser()
# parser.add_option("-s", "--support", default=True, action="store_true", dest="help",
#                   help="Write -h or --help to see your options")
# parser.add_option("-p", "--ping-scan", dest="ping", help="Write -h or --help to see your options")
# parser.add_option("-g", "--garkt", dest="garkt", action="store_true", help="Write -h or --help to see your options")
# # parser.add_option("-w", "--w", dest="write", help="Write -h or --help to see your options")
# options = parser.parse_args()[0]
#
# t1 = datetime.now()
# if options.ping:
#     counter = 0
#     ip_base = ""
#
#     for i in options.ping:
#         if counter == 3:
#             break
#         if i == '.':
#             counter += 1
#         ip_base += i
#
#     multiprocess_ping_scan(ip_base, True)
#     t2 = datetime.now()
#     print("Ping scan took " + str(t2-t1))
#
# if options.garkt:
#     multiprocess_ping_scan('12312312', False)
#     icmp_dat = open("icmp.dat", "r")
#     total_lines = len(icmp_dat.readlines())
#     icmp_dat.seek(0, 0)
#     ip_adds = []
#     for i in range(total_lines):
#         ip_adds.append(icmp_dat.readline().split())
#
# if options.help:
#

